################Apriori

!pip install mlxtend
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules
import warnings

# Ignore runtime warnings from division by zero
warnings.filterwarnings("ignore", category=RuntimeWarning)

# Sample dataset (like items bought or pages visited)
transactions = [
    ['milk', 'bread', 'butter'],
    ['bread', 'diaper', 'beer'],
    ['milk', 'diaper', 'bread', 'beer'],
    ['milk', 'bread', 'butter'],
    ['bread', 'butter']
]

# Convert to dataframe
te = TransactionEncoder()
te_array = te.fit_transform(transactions)
df = pd.DataFrame(te_array, columns=te.columns_)

# Generate frequent itemsets
frequent_itemsets = apriori(df, min_support=0.5, use_colnames=True)

# Generate association rules
rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.6)

# Print frequent itemsets
print("\n--- Frequent Itemsets ---")
for i, row in frequent_itemsets.iterrows():
    items = ', '.join(row['itemsets'])
    print(f"{items} (support: {row['support']:.2f})")

# Print readable rules
print("\n--- Association Rules ---")
for i, row in rules.iterrows():
    lhs = ', '.join(row['antecedents'])
    rhs = ', '.join(row['consequents'])
    print(f"IF [{lhs}] THEN [{rhs}] (confidence: {row['confidence']:.2f}, lift: {row['lift']:.2f})")
