##### Virtual Assistant




import nltk 
from nltk.chat.util import Chat,reflections 
pairs=[ 
 [ 
 r"my name is (.*)", 
 ["Hello %1, How are you today ?",] 
 ], 
 [ 
 r"hi|hey|hello", 
 ["Hello", "Hey there",] 
 ], 
 [ 
 r"what is your name ?", 
 ["My name is Chatbot",] 
 ], 
 [ 
 r"how are you ?", 
 ["I'm doing good. How about You ?",] 
 ], 
 [ 
 r"sorry (.*)", 
 ["Its alright","Its OK, never mind",] 
 ], 
 [ 
 r"i'm (.*) doing good", 
 ["Nice to hear that","How can I help you?",] 
 ], 
] 
def chat(): 
 print("Hi, I am a Chatbot created for NLP practicals") 
 chat = Chat(pairs, reflections) 
 chat.converse() 
if __name__ == "__main__": 
 chat() 




##################### 2nd code


# âœ… Install required packages if not already
# !pip install nltk scikit-learn

import random
import nltk
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline

nltk.download('punkt')
nltk.download('wordnet')
nltk.download('stopwords')

lemmatizer = WordNetLemmatizer()

# --------- 1. Define intents ---------
intents = {
    "greeting": {
        "patterns": ["Hi", "Hello", "Hey", "Good morning", "Good evening"],
        "responses": ["Hi!", "Hello there!", "Hey, how can I help?"]
    },
    "goodbye": {
        "patterns": ["Bye", "Goodbye", "See you later"],
        "responses": ["Goodbye!", "Take care!", "See you soon!"]
    },
    "thanks": {
        "patterns": ["Thanks", "Thank you", "That's helpful"],
        "responses": ["You're welcome!", "Happy to help!", "Any time!"]
    },
    "help": {
        "patterns": ["Can you help me?", "I need assistance", "Help me"],
        "responses": ["Sure! What do you need help with?", "I'm here to help!"]
    }
}

# --------- 2. Prepare training data ---------
X = []  # Patterns
y = []  # Tags

for tag, intent in intents.items():
    for pattern in intent["patterns"]:
        X.append(pattern)
        y.append(tag)

# --------- 3. Build model (vectorizer + classifier pipeline) ---------
model = make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(X, y)

# --------- 4. Chat function ---------
def chat():
    print("\n Virtual Assistant is ready! (type 'quit' to exit)")
    while True:
        user_input = input("You: ")
        if user_input.lower() == "quit":
            print("Bot: Goodbye!")
            break
        intent = model.predict([user_input])[0]
        print("Bot:", random.choice(intents[intent]["responses"]))

# --------- 5. Start the bot ---------
chat()
